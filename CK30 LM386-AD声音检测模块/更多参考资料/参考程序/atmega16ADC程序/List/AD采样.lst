
AVRASM ver. 2.1.30  I:\工作室\模块设计\发客人资料\热敏数模输出\AD采样程序\List\AD采样.asm Fri Feb 28 10:57:47 2014

I:\工作室\模块设计\发客人资料\热敏数模输出\AD采样程序\List\AD采样.asm(1051): warning: Register r4 already defined by the .DEF directive
I:\工作室\模块设计\发客人资料\热敏数模输出\AD采样程序\List\AD采样.asm(1052): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_data=R4
                 	.DEF _adc_v=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0091 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 00be 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 _0x20000:
00002b 000a      	.DB  0xA,0x0
                 
                 __GLOBAL_INI_TBL:
00002c 0001      	.DW  0x01
00002d 0002      	.DW  0x02
00002e 0054      	.DW  __REG_BIT_VARS*2
                 
00002f 0002      	.DW  0x02
000030 0160      	.DW  _0x2000B
000031 0056      	.DW  _0x20000*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003a e1f8      	LDI  R31,0x18
00003b bdf1      	OUT  WDTCR,R31
00003c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(0x400)
000044 e094      	LDI  R25,HIGH(0x400)
000045 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(0x45F)
00005c bfed      	OUT  SPL,R30
00005d e0e4      	LDI  R30,HIGH(0x45F)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e6c0      	LDI  R28,LOW(0x160)
000060 e0d1      	LDI  R29,HIGH(0x160)
                 
000061 940c 0063 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/********************************************************************
                 ;                      ******浩瀚电子******
                 ;**实现功能:ADC数据采集测试程序，串口输出数据显示 波特率9600 晶振11.0592Mhz  ADC输入口PA7
                 ;**使用芯片：Amega16
                 ;**晶振：11.0592MHZ
                 ;**编译环境：CVAVR2.04.4a
                 ;**作者：Howard
                 ;**网站：http://hhmcu.taobao.com
                 ;**日期：2013-6-11
                 ;**【声明】此程序仅用于学习与参考
                 ;*********************************************************************/
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "uart.h"
                 ;
                 ;bit time_2ms_ok;
                 ;unsigned int adc_data,adc_v;
                 ;void main(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0014 
                 ; 0000 0015     DDRA = 0xf;
000063 e0ef      	LDI  R30,LOW(15)
000064 bbea      	OUT  0x1A,R30
                 ; 0000 0016     PORTA = 0x0f;
000065 bbeb      	OUT  0x1B,R30
                 ; 0000 0017     UART_Init();
000066 d05e      	RCALL _UART_Init
                 ; 0000 0018     //T/C0
                 ; 0000 0019     TCCR0 = 0x0B;//64分频，CTC模式
000067 e0eb      	LDI  R30,LOW(11)
000068 bfe3      	OUT  0x33,R30
                 ; 0000 001A     TCNT0=00;
000069 e0e0      	LDI  R30,LOW(0)
00006a bfe2      	OUT  0x32,R30
                 ; 0000 001B     OCR0 = 0x7C;
00006b e7ec      	LDI  R30,LOW(124)
00006c bfec      	OUT  0x3C,R30
                 ; 0000 001C     TIMSK = 0x02;
00006d e0e2      	LDI  R30,LOW(2)
00006e bfe9      	OUT  0x39,R30
                 ; 0000 001D     //ADC
                 ; 0000 001E     ADMUX = 0x47;//外部参考电压源，单端输入ADC7
00006f e4e7      	LDI  R30,LOW(71)
000070 b9e7      	OUT  0x7,R30
                 ; 0000 001F     SFIOR &= 0x1F;
000071 b7e0      	IN   R30,0x30
000072 71ef      	ANDI R30,LOW(0x1F)
000073 bfe0      	OUT  0x30,R30
                 ; 0000 0020     SFIOR |= 0x60;
000074 b7e0      	IN   R30,0x30
000075 66e0      	ORI  R30,LOW(0x60)
000076 bfe0      	OUT  0x30,R30
                 ; 0000 0021     ADCSRA = 0xAD;//ADC中断允许，自动触发，ADC转换中断允许，
000077 eaed      	LDI  R30,LOW(173)
000078 b9e6      	OUT  0x6,R30
                 ; 0000 0022     #asm("sei")
000079 9478      	sei
                 ; 0000 0023 
                 ; 0000 0024     while(1)
                 _0x3:
                 ; 0000 0025     {
                 ; 0000 0026             delay_ms(500);
00007a efe4      	LDI  R30,LOW(500)
00007b e0f1      	LDI  R31,HIGH(500)
00007c 93fa      	ST   -Y,R31
00007d 93ea      	ST   -Y,R30
00007e 940e 018c 	CALL _delay_ms
                 ; 0000 0027             UART_Put_Num(adc_v);
000080 01f3      	MOVW R30,R6
000081 2766      	CLR  R22
000082 2777      	CLR  R23
000083 940e 01e1 	CALL __PUTPARD1
000085 d087      	RCALL _UART_Put_Num
                 ; 0000 0028             UART_Send_Byte(0x20);
000086 e2e0      	LDI  R30,LOW(32)
000087 93ea      	ST   -Y,R30
000088 d047      	RCALL _UART_Send_Byte
                 ; 0000 0029              delay_ms(500);
000089 efe4      	LDI  R30,LOW(500)
00008a e0f1      	LDI  R31,HIGH(500)
00008b 93fa      	ST   -Y,R31
00008c 93ea      	ST   -Y,R30
00008d 940e 018c 	CALL _delay_ms
                 ; 0000 002A     }
00008f cfea      	RJMP _0x3
                 ; 0000 002B }
                 _0x6:
000090 cfff      	RJMP _0x6
                 ;
                 ;//ADC中断
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 002F {
                 _adc_isr:
000091 920a      	ST   -Y,R0
000092 921a      	ST   -Y,R1
000093 936a      	ST   -Y,R22
000094 937a      	ST   -Y,R23
000095 938a      	ST   -Y,R24
000096 939a      	ST   -Y,R25
000097 93aa      	ST   -Y,R26
000098 93ba      	ST   -Y,R27
000099 93ea      	ST   -Y,R30
00009a 93fa      	ST   -Y,R31
00009b b7ef      	IN   R30,SREG
00009c 93ea      	ST   -Y,R30
                 ; 0000 0030     adc_data = ADCW;
                +
00009d b044     +IN R4 , 4
00009e b055     +IN R5 , 4 + 1
                 	__INWR 4,5,4
                 ; 0000 0031     adc_v = (unsigned long)adc_data*5000/1024;
00009f 01d2      	MOVW R26,R4
0000a0 2788      	CLR  R24
0000a1 2799      	CLR  R25
                +
0000a2 e8e8     +LDI R30 , LOW ( 0x1388 )
0000a3 e1f3     +LDI R31 , HIGH ( 0x1388 )
0000a4 e060     +LDI R22 , BYTE3 ( 0x1388 )
0000a5 e070     +LDI R23 , BYTE4 ( 0x1388 )
                 	__GETD1N 0x1388
0000a6 940e 0198 	CALL __MULD12U
0000a8 01df      	MOVW R26,R30
0000a9 01cb      	MOVW R24,R22
                +
0000aa e0e0     +LDI R30 , LOW ( 0x400 )
0000ab e0f4     +LDI R31 , HIGH ( 0x400 )
0000ac e060     +LDI R22 , BYTE3 ( 0x400 )
0000ad e070     +LDI R23 , BYTE4 ( 0x400 )
                 	__GETD1N 0x400
0000ae 940e 01b8 	CALL __DIVD21U
0000b0 013f      	MOVW R6,R30
                 ; 0000 0032 }
0000b1 91e9      	LD   R30,Y+
0000b2 bfef      	OUT  SREG,R30
0000b3 91f9      	LD   R31,Y+
0000b4 91e9      	LD   R30,Y+
0000b5 91b9      	LD   R27,Y+
0000b6 91a9      	LD   R26,Y+
0000b7 9199      	LD   R25,Y+
0000b8 9189      	LD   R24,Y+
0000b9 9179      	LD   R23,Y+
0000ba 9169      	LD   R22,Y+
0000bb 9019      	LD   R1,Y+
0000bc 9009      	LD   R0,Y+
0000bd 9518      	RETI
                 ;
                 ;//Timer0比较匹配中断服务
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0036 {
                 _timer0_comp_isr:
0000be 93ea      	ST   -Y,R30
0000bf b7ef      	IN   R30,SREG
                 ; 0000 0037     time_2ms_ok = 1;
0000c0 9468      	SET
0000c1 f820      	BLD  R2,0
                 ; 0000 0038 }
0000c2 bfef      	OUT  SREG,R30
0000c3 91e9      	LD   R30,Y+
0000c4 9518      	RETI
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <string.h>
                 ;#include "uart.h"
                 ;#include "myfun.h"
                 ;
                 ;/**************************************************************************
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：无
                 ; - 返回说明：无
                 ; **************************************************************************/
                 ;
                 ;void UART_Init()
                 ; 0001 000D {
                 
                 	.CSEG
                 _UART_Init:
                 ; 0001 000E     UCSRA = 0x00;//不倍速
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 b9eb      	OUT  0xB,R30
                 ; 0001 000F     UCSRB = 0xD8;//使能接收中断
0000c7 ede8      	LDI  R30,LOW(216)
0000c8 b9ea      	OUT  0xA,R30
                 ; 0001 0010     UCSRC = 0x86;//偶校验,1位停止位
0000c9 e8e6      	LDI  R30,LOW(134)
0000ca bde0      	OUT  0x20,R30
                 ; 0001 0011     UBRRL = 0x47;
0000cb e4e7      	LDI  R30,LOW(71)
0000cc b9e9      	OUT  0x9,R30
                 ; 0001 0012     UBRRH = 0x00; //9600波特率@11.0592M
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bde0      	OUT  0x20,R30
                 ; 0001 0013 }
0000cf 9508      	RET
                 ;
                 ;
                 ;/**************************************************************************
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：mydata:要发送的一个字节
                 ; - 返回说明：无
                 ; - 注：发送一个字节，是串口发送的基础操作
                 ; **************************************************************************/
                 ;
                 ;void UART_Send_Byte(unsigned char mydata)
                 ; 0001 001E {
                 _UART_Send_Byte:
                 ; 0001 001F     while(!(UCSRA & (1 << UDRE)));
                 ;	mydata -> Y+0
                 _0x20003:
0000d0 9b5d      	SBIS 0xB,5
0000d1 cffe      	RJMP _0x20003
                 ; 0001 0020     UDR=mydata;
0000d2 81e8      	LD   R30,Y
0000d3 b9ec      	OUT  0xC,R30
                 ; 0001 0021 
                 ; 0001 0022 }
0000d4 9621      	ADIW R28,1
0000d5 9508      	RET
                 ;
                 ;/**************************************************************************
                 ; - 功能描述：串口发送0d 0a ，即回车换行
                 ; - 隶属模块：STC51串口操作
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：无
                 ; - 返回说明：无
                 ; - 注：此函数就是发送0d 0a这两个字节，在“超级终端”上会有回车换行的效果
                 ; **************************************************************************/
                 ;
                 ;void UART_Send_Enter()
                 ; 0001 002E {
                 _UART_Send_Enter:
                 ; 0001 002F  UART_Send_Byte(0x0d);
0000d6 e0ed      	LDI  R30,LOW(13)
0000d7 93ea      	ST   -Y,R30
0000d8 dff7      	RCALL _UART_Send_Byte
                 ; 0001 0030  UART_Send_Byte(0x0a);
0000d9 e0ea      	LDI  R30,LOW(10)
0000da 93ea      	ST   -Y,R30
0000db dff4      	RCALL _UART_Send_Byte
                 ; 0001 0031 }
0000dc 9508      	RET
                 ;
                 ;/**************************************************************************
                 ; - 功能描述：单片机的串口发送字符串
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：s:指向字符串的指针
                 ; - 返回说明：无
                 ; - 注：如果在字符串中有'\n'，则会发送一个回车换行
                 ; **************************************************************************/
                 ;
                 ;void UART_Send_Str(char *s)
                 ; 0001 003C {
                 _UART_Send_Str:
                 ; 0001 003D  int len=strlen(s)-1;
                 ; 0001 003E  int i;
                 ; 0001 003F  for(i=0;i<len;i++)
0000dd 940e 01ee 	CALL __SAVELOCR4
                 ;	*s -> Y+4
                 ;	len -> R16,R17
                 ;	i -> R18,R19
0000df 81ec      	LDD  R30,Y+4
0000e0 81fd      	LDD  R31,Y+4+1
0000e1 93fa      	ST   -Y,R31
0000e2 93ea      	ST   -Y,R30
0000e3 940e 0182 	CALL _strlen
0000e5 9731      	SBIW R30,1
0000e6 018f      	MOVW R16,R30
                +
0000e7 e020     +LDI R18 , LOW ( 0 )
0000e8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x20007:
                +
0000e9 1720     +CP R18 , R16
0000ea 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0000eb f45c      	BRGE _0x20008
                 ; 0001 0040  UART_Send_Byte(s[i]);
0000ec 01f9      	MOVW R30,R18
0000ed 81ac      	LDD  R26,Y+4
0000ee 81bd      	LDD  R27,Y+4+1
0000ef 0fae      	ADD  R26,R30
0000f0 1fbf      	ADC  R27,R31
0000f1 91ec      	LD   R30,X
0000f2 93ea      	ST   -Y,R30
0000f3 dfdc      	RCALL _UART_Send_Byte
                +
0000f4 5f2f     +SUBI R18 , LOW ( - 1 )
0000f5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000f6 cff2      	RJMP _0x20007
                 _0x20008:
                 ; 0001 0041 if(s[i]=='\n')
0000f7 01f9      	MOVW R30,R18
0000f8 81ac      	LDD  R26,Y+4
0000f9 81bd      	LDD  R27,Y+4+1
0000fa 0fae      	ADD  R26,R30
0000fb 1fbf      	ADC  R27,R31
0000fc 91ac      	LD   R26,X
0000fd 30aa      	CPI  R26,LOW(0xA)
0000fe f411      	BRNE _0x20009
                 ; 0001 0042  {
                 ; 0001 0043   UART_Send_Enter();
0000ff dfd6      	RCALL _UART_Send_Enter
                 ; 0001 0044  }
                 ; 0001 0045  else
000100 c008      	RJMP _0x2000A
                 _0x20009:
                 ; 0001 0046  {
                 ; 0001 0047   UART_Send_Byte(s[i]);
000101 01f9      	MOVW R30,R18
000102 81ac      	LDD  R26,Y+4
000103 81bd      	LDD  R27,Y+4+1
000104 0fae      	ADD  R26,R30
000105 1fbf      	ADC  R27,R31
000106 91ec      	LD   R30,X
000107 93ea      	ST   -Y,R30
000108 dfc7      	RCALL _UART_Send_Byte
                 ; 0001 0048  }
                 _0x2000A:
                 ; 0001 0049 }
000109 940e 01f3 	CALL __LOADLOCR4
00010b 9626      	ADIW R28,6
00010c 9508      	RET
                 ;
                 ;/**************************************************************************
                 ; - 功能描述：单片机的串口发送数值
                 ; - 隶属模块：STC51串口操作
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：dat:要发送的数值
                 ; - 返回说明：无
                 ; - 注：函数中会将数值转为相应的字符串，发送出去。比如 4567 转为 "4567"
                 ; **************************************************************************/
                 ;
                 ;void UART_Put_Num(unsigned long dat)
                 ; 0001 0055 {
                 _UART_Put_Num:
                 ; 0001 0056  char temp[20];
                 ; 0001 0057  u32tostr(dat,temp);
00010d 9764      	SBIW R28,20
                 ;	dat -> Y+20
                 ;	temp -> Y+0
                +
00010e 89ec     +LDD R30 , Y + 20
00010f 89fd     +LDD R31 , Y + 20 + 1
000110 896e     +LDD R22 , Y + 20 + 2
000111 897f     +LDD R23 , Y + 20 + 3
                 	__GETD1S 20
000112 940e 01e1 	CALL __PUTPARD1
000114 01fe      	MOVW R30,R28
000115 9634      	ADIW R30,4
000116 93fa      	ST   -Y,R31
000117 93ea      	ST   -Y,R30
000118 d006      	RCALL _u32tostr
                 ; 0001 0058  UART_Send_Str(temp);
000119 01fe      	MOVW R30,R28
00011a 93fa      	ST   -Y,R31
00011b 93ea      	ST   -Y,R30
00011c dfc0      	RCALL _UART_Send_Str
                 ; 0001 0059 }
00011d 9668      	ADIW R28,24
00011e 9508      	RET
                 ;
                 ;/**************************************************************************
                 ; - 功能描述：单片机的串口发送调试信息
                 ; - 隶属模块：串口操作
                 ; - 函数属性：外部，使用户使用
                 ; - 参数说明：inf:指向提示信息字符串的指针
                 ;             dat:一个数值，前面的提示信息就是在说明这个数值的意义
                 ; - 返回说明：无
                 ; **************************************************************************/
                 ;
                 ;void UART_Put_Inf(char *inf,unsigned long dat)
                 ; 0001 0065 {
                 ; 0001 0066  UART_Send_Str(inf);
                 ;	*inf -> Y+4
                 ;	dat -> Y+0
                 ; 0001 0067  UART_Put_Num(dat);
                 ; 0001 0068  UART_Send_Str("\n");
                 ; 0001 0069 }
                 
                 	.DSEG
                 _0x2000B:
000160           	.BYTE 0x2
                 ;
                 ;#include "myfun.h"
                 ;#include "string.h"
                 ;
                 ;/******************************************************************
                 ; - 功能描述：将一个32位的变量dat转为字符串，比如把1234转为"1234"
                 ; - 隶属模块：公开函数模块
                 ; - 函数属性：外部，用户可调用
                 ; - 参数说明：dat:带转的long型的变量
                 ;             str:指向字符数组的指针，转换后的字节串放在其中
                 ; - 返回说明：无
                 ; ******************************************************************/
                 ;
                 ;void u32tostr(unsigned long dat,char *str)
                 ; 0002 000E {
                 
                 	.CSEG
                 _u32tostr:
                 ; 0002 000F  char temp[20];
                 ; 0002 0010  unsigned char i=0,j=0;
                 ; 0002 0011  i=0;
00011f 9764      	SBIW R28,20
000120 931a      	ST   -Y,R17
000121 930a      	ST   -Y,R16
                 ;	dat -> Y+24
                 ;	*str -> Y+22
                 ;	temp -> Y+2
                 ;	i -> R17
                 ;	j -> R16
000122 e010      	LDI  R17,0
000123 e000      	LDI  R16,0
000124 e010      	LDI  R17,LOW(0)
                 ; 0002 0012  while(dat)
                 _0x40003:
                +
000125 8de8     +LDD R30 , Y + 24
000126 8df9     +LDD R31 , Y + 24 + 1
000127 8d6a     +LDD R22 , Y + 24 + 2
000128 8d7b     +LDD R23 , Y + 24 + 3
                 	__GETD1S 24
000129 940e 01ea 	CALL __CPD10
00012b f131      	BREQ _0x40005
                 ; 0002 0013  {
                 ; 0002 0014   temp[i]=dat%10+0x30;
00012c 2fe1      	MOV  R30,R17
00012d e0f0      	LDI  R31,0
00012e 01de      	MOVW R26,R28
00012f 9612      	ADIW R26,2
000130 0fea      	ADD  R30,R26
000131 1ffb      	ADC  R31,R27
000132 93ff      	PUSH R31
000133 93ef      	PUSH R30
                +
000134 8da8     +LDD R26 , Y + 24
000135 8db9     +LDD R27 , Y + 24 + 1
000136 8d8a     +LDD R24 , Y + 24 + 2
000137 8d9b     +LDD R25 , Y + 24 + 3
                 	__GETD2S 24
                +
000138 e0ea     +LDI R30 , LOW ( 0xA )
000139 e0f0     +LDI R31 , HIGH ( 0xA )
00013a e060     +LDI R22 , BYTE3 ( 0xA )
00013b e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00013c 940e 01dd 	CALL __MODD21U
00013e 5de0      	SUBI R30,-LOW(48)
00013f 91af      	POP  R26
000140 91bf      	POP  R27
000141 93ec      	ST   X,R30
                 ; 0002 0015   i++;
000142 5f1f      	SUBI R17,-1
                 ; 0002 0016   dat/=10;
                +
000143 8da8     +LDD R26 , Y + 24
000144 8db9     +LDD R27 , Y + 24 + 1
000145 8d8a     +LDD R24 , Y + 24 + 2
000146 8d9b     +LDD R25 , Y + 24 + 3
                 	__GETD2S 24
                +
000147 e0ea     +LDI R30 , LOW ( 0xA )
000148 e0f0     +LDI R31 , HIGH ( 0xA )
000149 e060     +LDI R22 , BYTE3 ( 0xA )
00014a e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00014b 940e 01b8 	CALL __DIVD21U
                +
00014d 8fe8     +STD Y + 24 , R30
00014e 8ff9     +STD Y + 24 + 1 , R31
00014f 8f6a     +STD Y + 24 + 2 , R22
000150 8f7b     +STD Y + 24 + 3 , R23
                 	__PUTD1S 24
                 ; 0002 0017  }
000151 cfd3      	RJMP _0x40003
                 _0x40005:
                 ; 0002 0018  j=i;
000152 2f01      	MOV  R16,R17
                 ; 0002 0019  for(i=0;i<j;i++)
000153 e010      	LDI  R17,LOW(0)
                 _0x40007:
000154 1710      	CP   R17,R16
000155 f4b8      	BRSH _0x40008
                 ; 0002 001A  {
                 ; 0002 001B   str[i]=temp[j-i-1];
000156 2fe1      	MOV  R30,R17
000157 89ae      	LDD  R26,Y+22
000158 89bf      	LDD  R27,Y+22+1
000159 e0f0      	LDI  R31,0
00015a 0fea      	ADD  R30,R26
00015b 1ffb      	ADC  R31,R27
00015c 01bf      	MOVW R22,R30
00015d 2fa0      	MOV  R26,R16
00015e 1ba1      	SUB  R26,R17
00015f e0e1      	LDI  R30,LOW(1)
000160 940e 01e6 	CALL __SWAPB12
000162 1bea      	SUB  R30,R26
000163 e0f0      	LDI  R31,0
000164 01de      	MOVW R26,R28
000165 9612      	ADIW R26,2
000166 0fae      	ADD  R26,R30
000167 1fbf      	ADC  R27,R31
000168 91ec      	LD   R30,X
000169 01db      	MOVW R26,R22
00016a 93ec      	ST   X,R30
                 ; 0002 001C  }
00016b 5f1f      	SUBI R17,-1
00016c cfe7      	RJMP _0x40007
                 _0x40008:
                 ; 0002 001D  if(!i) {str[i++]='0';}
00016d 3010      	CPI  R17,0
00016e f449      	BRNE _0x40009
00016f 2fe1      	MOV  R30,R17
000170 5f1f      	SUBI R17,-1
000171 89ae      	LDD  R26,Y+22
000172 89bf      	LDD  R27,Y+22+1
000173 e0f0      	LDI  R31,0
000174 0fae      	ADD  R26,R30
000175 1fbf      	ADC  R27,R31
000176 e3e0      	LDI  R30,LOW(48)
000177 93ec      	ST   X,R30
                 ; 0002 001E  str[i]=0;
                 _0x40009:
000178 89ae      	LDD  R26,Y+22
000179 89bf      	LDD  R27,Y+22+1
00017a 27ee      	CLR  R30
00017b 0fa1      	ADD  R26,R17
00017c 1fbe      	ADC  R27,R30
00017d 93ec      	ST   X,R30
                 ; 0002 001F }
00017e 8119      	LDD  R17,Y+1
00017f 8108      	LDD  R16,Y+0
000180 966c      	ADIW R28,28
000181 9508      	RET
                 ;
                 ;/******************************************************************
                 ; - 功能描述：将一个字符串转为32位的变量，比如"1234"转为1234
                 ; - 隶属模块：公开函数模块
                 ; - 函数属性：外部，用户可调用
                 ; - 参数说明：str:指向待转换的字符串
                 ; - 返回说明：转换后的数值
                 ; ******************************************************************/
                 ;
                 ;unsigned long strtou32(char *str)
                 ; 0002 002A {
                 ; 0002 002B  unsigned long temp=0;
                 ; 0002 002C  unsigned long fact=1;
                 ; 0002 002D  unsigned char len=strlen(str);
                 ; 0002 002E  unsigned char i;
                 ; 0002 002F  for(i=len;i>0;i--)
                 ;	*str -> Y+10
                 ;	temp -> Y+6
                 ;	fact -> Y+2
                 ;	len -> R17
                 ;	i -> R16
                 ; 0002 0030  {
                 ; 0002 0031   temp+=((str[i-1]-0x30)*fact);
                 ; 0002 0032   fact*=10;
                 ; 0002 0033  }
                 ; 0002 0034  return temp;
                 ; 0002 0035 }
                 
                 	.CSEG
                 _strlen:
000182 91a9          ld   r26,y+
000183 91b9          ld   r27,y+
000184 27ee          clr  r30
000185 27ff          clr  r31
                 strlen0:
000186 916d          ld   r22,x+
000187 2366          tst  r22
000188 f011          breq strlen1
000189 9631          adiw r30,1
00018a cffb          rjmp strlen0
                 strlen1:
00018b 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
00018c 91e9      	ld   r30,y+
00018d 91f9      	ld   r31,y+
00018e 9630      	adiw r30,0
00018f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000190 ed80     +LDI R24 , LOW ( 0x7D0 )
000191 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000192 9701     +SBIW R24 , 1
000193 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000194 95a8      	wdr
000195 9731      	sbiw r30,1
000196 f7c9      	brne __delay_ms0
                 __delay_ms1:
000197 9508      	ret
                 
                 __MULD12U:
000198 9f7a      	MUL  R23,R26
000199 2d70      	MOV  R23,R0
00019a 9f6b      	MUL  R22,R27
00019b 0d70      	ADD  R23,R0
00019c 9ff8      	MUL  R31,R24
00019d 0d70      	ADD  R23,R0
00019e 9fe9      	MUL  R30,R25
00019f 0d70      	ADD  R23,R0
0001a0 9f6a      	MUL  R22,R26
0001a1 2d60      	MOV  R22,R0
0001a2 0d71      	ADD  R23,R1
0001a3 9ffb      	MUL  R31,R27
0001a4 0d60      	ADD  R22,R0
0001a5 1d71      	ADC  R23,R1
0001a6 9fe8      	MUL  R30,R24
0001a7 0d60      	ADD  R22,R0
0001a8 1d71      	ADC  R23,R1
0001a9 2788      	CLR  R24
0001aa 9ffa      	MUL  R31,R26
0001ab 2df0      	MOV  R31,R0
0001ac 0d61      	ADD  R22,R1
0001ad 1f78      	ADC  R23,R24
0001ae 9feb      	MUL  R30,R27
0001af 0df0      	ADD  R31,R0
0001b0 1d61      	ADC  R22,R1
0001b1 1f78      	ADC  R23,R24
0001b2 9fea      	MUL  R30,R26
0001b3 2de0      	MOV  R30,R0
0001b4 0df1      	ADD  R31,R1
0001b5 1f68      	ADC  R22,R24
0001b6 1f78      	ADC  R23,R24
0001b7 9508      	RET
                 
                 __DIVD21U:
0001b8 933f      	PUSH R19
0001b9 934f      	PUSH R20
0001ba 935f      	PUSH R21
0001bb 2400      	CLR  R0
0001bc 2411      	CLR  R1
0001bd 2744      	CLR  R20
0001be 2755      	CLR  R21
0001bf e230      	LDI  R19,32
                 __DIVD21U1:
0001c0 0faa      	LSL  R26
0001c1 1fbb      	ROL  R27
0001c2 1f88      	ROL  R24
0001c3 1f99      	ROL  R25
0001c4 1c00      	ROL  R0
0001c5 1c11      	ROL  R1
0001c6 1f44      	ROL  R20
0001c7 1f55      	ROL  R21
0001c8 1a0e      	SUB  R0,R30
0001c9 0a1f      	SBC  R1,R31
0001ca 0b46      	SBC  R20,R22
0001cb 0b57      	SBC  R21,R23
0001cc f428      	BRCC __DIVD21U2
0001cd 0e0e      	ADD  R0,R30
0001ce 1e1f      	ADC  R1,R31
0001cf 1f46      	ADC  R20,R22
0001d0 1f57      	ADC  R21,R23
0001d1 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0001d2 60a1      	SBR  R26,1
                 __DIVD21U3:
0001d3 953a      	DEC  R19
0001d4 f759      	BRNE __DIVD21U1
0001d5 01fd      	MOVW R30,R26
0001d6 01bc      	MOVW R22,R24
0001d7 01d0      	MOVW R26,R0
0001d8 01ca      	MOVW R24,R20
0001d9 915f      	POP  R21
0001da 914f      	POP  R20
0001db 913f      	POP  R19
0001dc 9508      	RET
                 
                 __MODD21U:
0001dd dfda      	RCALL __DIVD21U
0001de 01fd      	MOVW R30,R26
0001df 01bc      	MOVW R22,R24
0001e0 9508      	RET
                 
                 __PUTPARD1:
0001e1 937a      	ST   -Y,R23
0001e2 936a      	ST   -Y,R22
0001e3 93fa      	ST   -Y,R31
0001e4 93ea      	ST   -Y,R30
0001e5 9508      	RET
                 
                 __SWAPB12:
0001e6 2e1a      	MOV  R1,R26
0001e7 2fae      	MOV  R26,R30
0001e8 2de1      	MOV  R30,R1
0001e9 9508      	RET
                 
                 __CPD10:
0001ea 9730      	SBIW R30,0
0001eb 4060      	SBCI R22,0
0001ec 4070      	SBCI R23,0
0001ed 9508      	RET
                 
                 __SAVELOCR4:
0001ee 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001ef 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001f0 931a      	ST   -Y,R17
0001f1 930a      	ST   -Y,R16
0001f2 9508      	RET
                 
                 __LOADLOCR4:
0001f3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001f4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001f5 8119      	LDD  R17,Y+1
0001f6 8108      	LD   R16,Y
0001f7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  21 r1 :  15 r2 :   1 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  19 r18:   8 r19:   9 r20:   7 r21:   6 r22:  31 r23:  25 
r24:  26 r25:  10 r26:  46 r27:  26 r28:  11 r29:   1 r30: 135 r31:  45 
x  :  12 y  :  94 z  :   7 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  18 
adiw  :   9 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  13 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   1 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  22 ld    :  23 ldd   :  35 ldi   :  63 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  12 movw  :  24 
mul   :  10 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  26 pop   :   5 push  :   5 rcall :  11 ret   :  16 
reti  :   2 rjmp  :  10 rol   :   7 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  44 std   :   4 sts   :   0 sub   :   3 subi  :   5 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003f0    990     18   1008   16384   6.2%
[.dseg] 0x000060 0x000162      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
